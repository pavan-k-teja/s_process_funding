This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-07T15:59:59.600Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
AllocationChart.tsx
Dashboard.tsx
login-form.tsx
Navbar.tsx
NetworkGraph.tsx
recommender-page.tsx
Sidebar.tsx
theme-provider.tsx
UtilityTable.tsx

================================================================
Files
================================================================

================
File: AllocationChart.tsx
================
import { useEffect, useRef, useState } from "react";
import { select, line, drag, curveCatmullRom } from "d3";

interface Point {
  id: number;
  x: number;
  y: number;
}

const width = 600;
const height = 400;

// Initial control points
const initialPoints: Point[] = [
  { id: 0, x: 100, y: 200 },
  { id: 1, x: 300, y: 100 },
  { id: 2, x: 500, y: 300 }
];

export default function AllocationChart() {
  const [points, setPoints] = useState<Point[]>(initialPoints);
  const svgRef = useRef<SVGSVGElement | null>(null);

  useEffect(() => {
    if (!svgRef.current) return;

    const svg = select(svgRef.current);

    // Line generator
    const curve = line<Point>()
      .x(d => d.x)
      .y(d => d.y)
      .curve(curveCatmullRom.alpha(0.5)); // Smooth curve

    const update = () => {
      // Update curve path
      svg
        .selectAll("path")
        .data([points])
        .join("path")
        .attr("d", curve)
        .attr("fill", "none")
        .attr("stroke", "blue")
        .attr("stroke-width", 2);

      // Update circles
      const circles = svg
        .selectAll<SVGCircleElement, Point>("circle")
        .data(points)
        .join("circle")
        .attr("r", 8)
        .attr("fill", "red")
        .attr("stroke", "black")
        .attr("cx", d => d.x)
        .attr("cy", d => d.y);

      // Drag behavior
      circles.call(
        drag<SVGCircleElement, Point>()
          .on("drag", (event, d) => {
            d.x = Math.max(0, Math.min(width, event.x));
            d.y = Math.max(0, Math.min(height, event.y));
            setPoints([...points]);
            update();
          })
      );
    };

    update();
  }, [points]);

  return (
    <svg ref={svgRef} width={width} height={height} className="border bg-white" />
  );
}

================
File: Dashboard.tsx
================
import React from 'react';
import Navbar from '@/components/Navbar';
import Sidebar from '@/components/Sidebar';
import UtilityTable from '@/components/UtilityTable';
import { NetworkGraph } from '@/components/NetworkGraph';
import AllocationChart from '@/components/AllocationChart';

const example_recommenders = [
  { name: 'Recommender 1', allocation: 10, color: '#ff0000' },
  { name: 'Recommender 2', allocation: 20, color: '#00ff00' },
  { name: 'Recommender 3', allocation: 30, color: '#0000ff' },
];

const example_organizations = [
  {
    name: 'Organization 1',
    allocation: 10,
    colorStrip: '#ff0000',
  },
  {
    name: 'Organization 2',
    allocation: 20,
    colorStrip: '#00ff00',
  },
  {
    name: 'Organization 3',
    allocation: 30,
    colorStrip: '#0000ff',
  },
];

const example_utility_table = [
  {
    name: 'Company 1',
    fdv: 100,
    ldt: '100k',
    conc: 10,
  },
  {
    name: 'Company 2',
    fdv: 200,
    ldt: '200k',
    conc: 20,
  },
  {
    name: 'Company 3',
    fdv: 300,
    ldt: '300k',
    conc: 30,
  },
];

const Dashboard: React.FC = () => {
  return (
    <div className="w-full h-screen flex flex-col">
      <Navbar profileName="JT" onLogout={() => { console.log("Logout is Clicked") }} />
      <div className="flex flex-1">
        <Sidebar recommenders={example_recommenders} organizations={example_organizations} />
        <div className="flex flex-col flex-1">
          <div className="flex-1">
            <NetworkGraph />
          </div>
          <div className="flex-1">
            <AllocationChart />
          </div>
        </div>
        <UtilityTable initialBudget={100} maxBudget={1000} companies={example_utility_table} />
      </div>
    </div>
  );
};

export default Dashboard;

================
File: login-form.tsx
================
import React, { useState } from "react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

interface LoginFormProps extends React.ComponentPropsWithoutRef<"div"> {
  onLoginSuccess: () => void
}

export function LoginForm({
  className,
  onLoginSuccess,
  ...props
}: LoginFormProps) {


  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      console.log("username", username);
      console.log("password", password);
      const response = await fetch("/api/auth", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify({ username, password }),
        // mode: "cors",
      });

      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.message || "Login failed");
      }

      localStorage.setItem("jwt", data.access_token);
      // alert("Login successful!");
      onLoginSuccess();
      // Redirect or perform further actions here

    } catch (err: any) {
      setError(err.message);
    }
  };



  return (
    <div className={cn("flex flex-col gap-6", className)} {...props}>
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl">Login</CardTitle>
          <CardDescription>
            Enter your username and password to login to your account
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleLogin}>
            <div className="flex flex-col gap-6">
              <div className="grid gap-2">
                <div className="flex items-center">

                  <Label htmlFor="username">Username</Label>
                </div>
                <Input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  // placeholder="m@example.com"
                  required
                />
              </div>
              <div className="grid gap-2">
                <div className="flex items-center">
                  <Label htmlFor="password">Password</Label>
                  {/* <a
                    href="#"
                    className="ml-auto inline-block text-sm underline-offset-4 hover:underline"
                  >
                    Forgot your password?
                  </a> */}
                </div>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
              {error && <p className="text-red-500 text-sm">{error}</p>}
              <Button type="submit" className="w-full">
                Login
              </Button>
              {/* <Button variant="outline" className="w-full">
                Login with Google
              </Button> */}
            </div>
            {/* <div className="mt-4 text-center text-sm">
              Don&apos;t have an account?{" "}
              <a href="#" className="underline underline-offset-4">
                Sign up
              </a>
            </div> */}
          </form>
        </CardContent>
      </Card>
    </div>
  )
}

================
File: Navbar.tsx
================
import React from 'react';
import { Button } from '@/components/ui/button';
import { Avatar } from '@/components/ui/avatar';

interface NavbarProps {
    profileName: string; // Profile name to display inside the avatar
    onLogout: () => void; // Function to handle logout
}

const Navbar: React.FC<NavbarProps> = ({ profileName, onLogout }) => {
    return (
        <nav className="flex items-center justify-end p-4 bg-white text-black shadow-md w-full">
            <div className="flex items-center space-x-4">
                {/* Profile Icon */}
                <Avatar className="w-10 h-10 flex items-center justify-center rounded-full bg-black text-white">
                    <span className="text-sm font-medium">{profileName}</span>
                </Avatar>

                {/* Logout Button */}
                <Button onClick={onLogout} className="bg-transparent text-black hover:bg-gray-100 hover:border-black border-white">
                    Logout
                </Button>
            </div>
        </nav>
    );
};

export default Navbar;

================
File: NetworkGraph.tsx
================
import React, { useRef, useEffect } from 'react';
import * as d3 from 'd3';

interface Node {
  id: string;
  level: number;
}

interface Link {
  source: Node;
  target: Node;
}

const width = 400;
const height = 300;
const levelSpacing = 80;  // Vertical gap between levels
// const rowSpacing = 100;    // Horizontal gap between nodes at the same level

const nodes: Node[] = [
  { id: "Σ", level: 0 },
  { id: "JT", level: 1 }, { id: "JM", level: 1 }, { id: "DM", level: 1 },
  { id: "VA", level: 2 }, { id: "IF", level: 2 }, { id: "GZ", level: 2 },
  { id: "CF", level: 2 }, { id: "BO", level: 2 }, { id: "XO", level: 2 }
];

const links: Link[] = [];
nodes.forEach(source => {
  nodes.forEach(target => {
    if (source.level + 1 === target.level) {
      links.push({ source, target });
    }
  });
});

// Function to calculate positions dynamically
const calculatePositions = (nodes: Node[]) => {
  const levelGroups: { [key: number]: Node[] } = {};
  
  // Group nodes by level
  nodes.forEach(node => {
    if (!levelGroups[node.level]) levelGroups[node.level] = [];
    levelGroups[node.level].push(node);
  });

  // Assign x, y positions based on levelSpacing and rowSpacing
  return nodes.map(node => {
    const levelNodes = levelGroups[node.level];
    const index = levelNodes.indexOf(node);
    const totalNodes = levelNodes.length;
    
    return {
      ...node,
      // x: (width / (totalNodes + 1)) * (index + 1), // Spread evenly
      x: (width / (totalNodes + 1)) * (index + 1), // Spread evenly
      y: node.level * levelSpacing + 50,          // Stack levels
    };
  });
};

export const NetworkGraph: React.FC = () => {
  const svgRef = useRef<SVGSVGElement>(null);
  const positionedNodes = calculatePositions(nodes);

  useEffect(() => {
    const svg = d3.select(svgRef.current)
      .attr("width", width)
      .attr("height", height);

    // Draw links first (so they appear behind nodes)
    svg.selectAll(".link")
      .data(links)
      .enter().append("line")
      .attr("stroke", "gray")
      .attr("stroke-width", 1.5)
      .attr("x1", d => positionedNodes.find(n => n.id === d.source.id)?.x ?? 0)
      .attr("y1", d => positionedNodes.find(n => n.id === d.source.id)?.y ?? 0)
      .attr("x2", d => positionedNodes.find(n => n.id === d.target.id)?.x ?? 0)
      .attr("y2", d => positionedNodes.find(n => n.id === d.target.id)?.y ?? 0)
      .lower();

    const nodeGroup = svg.selectAll(".node")
      .data(positionedNodes)
      .enter().append("g")
      .attr("class", "node")
      .attr("transform", d => `translate(${d.x}, ${d.y})`);

    nodeGroup.append("circle")
      .attr("r", 15)
      .attr("fill", "black");

    // Text inside nodes
    nodeGroup.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "0.35em")
      .attr("fill", "white")
      .style("font-size", "12px")
      .text(d => d.id);
  }, []);

  return <svg ref={svgRef}></svg>;
};

================
File: recommender-page.tsx
================
import React, { useEffect, useState } from 'react'

const RecommenderPage: React.FC = () => {
  const [data, setData] = useState(null)
  const [error, setError] = useState("")

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem("jwt")
        const response = await fetch("/api/self_data", {
          headers: {
            "Authorization": `Bearer ${token}`,
            "Access-Control-Allow-Origin": "*",
          },
        })

        if (!response.ok) {
          throw new Error("Failed to fetch protected data")
        }

        const data = await response.json()
        setData(data)
      } catch (err: any) {
        setError(err.message)
      }
    }

    fetchData()
  }, [])

  if (error) {
    return <div>Error: {error}</div>
  }

  return (
    <div>
      <h1>Protected Data</h1>
      <p>{JSON.stringify(data, null, 2)}</p>
    </div>
  )
}

export default RecommenderPage

================
File: Sidebar.tsx
================
import React from 'react';

interface Recommender {
  name: string;
  allocation: number;
  color: string;
}

interface Organization {
  name: string;
  allocation: number;
  colorStrip: string;
}

interface SidebarProps {
  recommenders: Recommender[];
  organizations: Organization[];
}

const lightenCplor = (color: string, percent: number) => {
  console.log('color', color);
  console.log('percent', percent);

  const hexPercent = (percent / 100 * 255).toString(16);

  const lighten = color + hexPercent;

  console.log('lighten', lighten);

  return lighten;
}

// const example_recommenders: Recommender[] = [
//   { name: 'Recommender 1', allocation: 10, color: '#ff0000' },
//   { name: 'Recommender 2', allocation: 20, color: '#00ff00' },
//   { name: 'Recommender 3', allocation: 30, color: '#0000ff' },
// ];

// const example_organizations: Organization[] = [
//   {
//     name: 'Organization 1',
//     allocation: 10,
//     colorStrip: '#ff0000',
//   },
//   {
//     name: 'Organization 2',
//     allocation: 20,
//     colorStrip: '#00ff00',
//   },
//   {
//     name: 'Organization 3',
//     allocation: 30,
//     colorStrip: '#0000ff',
//   },
// ];

const Sidebar: React.FC<SidebarProps> = ({ recommenders, organizations }) => {
  const totalRecommenderAllocation = recommenders.reduce((sum, r) => sum + r.allocation, 0);
  const totalOrganizationAllocation = organizations.reduce((sum, o) => sum + o.allocation, 0);

  return (
    <div className="w-64 h-screen bg-gray-100 flex flex-col overflow-hidden">
      {/* Recommenders Section */}
      <div className="flex flex-col space-y-0.5 mb-1" style={{ flex: '0 0 20%' }}>
        {recommenders.map((recommender) => {
          const heightPercentage = (recommender.allocation / totalRecommenderAllocation) * 100;
          return (
            <div
              key={recommender.name}
              className="flex items-center justify-between px-2 text-white text-sm font-medium rounded"
              style={{ backgroundColor: recommender.color, height: `${heightPercentage}%` }}
            >
              <span>{recommender.name}</span>
              <span>${recommender.allocation}k</span>
            </div>
          );
        })}
      </div>

      {/* Organizations Section */}
      <div className="flex-1 overflow-y-visible scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200  space-y-0.5">
        {organizations.map((organization) => {
          const heightPercentage = (organization.allocation / totalOrganizationAllocation) * 100;
          return (
            <div
              key={organization.name}
              className="flex items-center px-0 py-0 text-sm font-medium rounded"
              style={{
                backgroundColor: `${lightenCplor(organization.colorStrip, 20)}`,
                height: `${heightPercentage}%`,
              }}
            >
              <div
                className="w-3 h-full mr-2 ml-0 pl-0 rounded"
                style={{ backgroundColor: organization.colorStrip }}
              ></div>
              <span>{organization.name}</span>
              <span className="ml-auto mr-1">${organization.allocation}k</span>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default Sidebar;

================
File: theme-provider.tsx
================
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")

  return context
}

================
File: UtilityTable.tsx
================
import React, { useState } from "react";

interface CompanyData {
  name: string;
  fdv: number;
  ldt: string; // Assuming this is a formatted string like "243k"
  conc: number;
}

interface UtilityTableProps {
  initialBudget: number;
  maxBudget: number;
  companies: CompanyData[];
}

const UtilityTable: React.FC<UtilityTableProps> = ({
  initialBudget,
  maxBudget,
  companies,
}) => {
  const [currentBudget, setCurrentBudget] = useState(initialBudget);

  const handleSliderChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCurrentBudget(Number(event.target.value));
  };

  return (
    <div className="flex flex-col w-full h-full p-4 bg-gray-50">
      {/* Budget Slider */}
      <div className="mb-4">
        <div className="text-sm text-gray-600 mb-2">
          Simulated Budget: {currentBudget.toLocaleString()}k
        </div>
        <input
          type="range"
          min="0"
          max={maxBudget}
          value={currentBudget}
          onChange={handleSliderChange}
          className="w-full h-2 appearance-none bg-gray-200 rounded-full focus:outline-none focus:ring-blue-400 slider-thumb"
          style={{
            background: `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${
              (currentBudget / maxBudget) * 100
            }%, #e5e7eb ${(currentBudget / maxBudget) * 100}%, #e5e7eb 100%)`,
          }}
        />
      </div>

      {/* Table */}
      <div className="overflow-y-auto border rounded-md shadow-sm bg-white max-h-[80vh]">
        <table className="w-full table-auto border-collapse text-sm text-gray-700">
          <thead className="bg-gray-100 sticky top-0">
            <tr>
              <th className="px-4 py-2 text-left font-medium text-gray-600">
                Name
              </th>
              <th className="px-4 py-2 text-left font-medium text-gray-600">
                FDV
              </th>
              <th className="px-4 py-2 text-left font-medium text-gray-600">
                LDT
              </th>
              <th className="px-4 py-2 text-left font-medium text-gray-600">
                CONC
              </th>
            </tr>
          </thead>
          <tbody>
            {companies.map((company, index) => (
              <tr
                key={index}
                className={`${
                  index % 2 === 0 ? "bg-gray-50" : "bg-white"
                } hover:bg-gray-100`}
              >
                <td className="px-4 py-2 text-gray-800">{company.name}</td>
                <td
                  className={`px-4 py-2 ${
                    company.fdv > 0 ? "text-green-600 font-medium" : ""
                  }`}
                >
                  {company.fdv > 0 ? `${company.fdv.toLocaleString()}k` : "0.00"}
                </td>
                <td className="px-4 py-2 text-gray-800">{company.ldt || "0.00"}</td>
                <td
                  className={`px-4 py-2 ${
                    company.conc < 0
                      ? "text-red-600 font-medium"
                      : company.conc > 0
                      ? "text-green-600 font-medium"
                      : "text-gray-800"
                  }`}
                >
                  {company.conc.toFixed(2)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default UtilityTable;
